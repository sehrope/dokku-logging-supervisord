#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

PLUGIN_DIR=$(dirname $0)
source "$PLUGIN_DIR/functions"
source "$(dirname "$PLUGIN_DIR")/common/functions"

case "$1" in
  logs:all)
    shift 1
    tail_logs all $@
    ;;

  logs:app)
    shift 1
    tail_logs app $@
    ;;

  logs:supervisord)
    tail_logs all $2 $3 supervisor
    ;;

  ps:scale)
    echo "logging-supervisord plugin handles scaling, use the \"scale\"" \
         "command instead of \"ps:scale\"."
    exit 1
    ;;

  scale)
    [[ -z $2 ]] && echo "Please specify an app to scale" && exit 1
    verify_app_name "$2"
    APP="$2";

    REPO="$DOKKU_ROOT/$APP"
    if [ ! -d "$REPO" ]; then
      echo "No matching app: $APP"
      exit 1
    fi
    shift 2

    # TODO: Copy to a temp file first
    # TODO: Validate that it is of the form name=num

    SCALEFILE="$REPO/SCALE"
    for line in "$@"
    do
      echo "$line"
    done > "$SCALEFILE"

    # kill the app when running
    echo "Checking for existing running application"
    if [[ -f "$DOKKU_ROOT/$APP/CONTAINER" ]]; then
      echo "Existing running application found. Will kill it."
      oldid=$(< "$DOKKU_ROOT/$APP/CONTAINER")
      docker kill $oldid > /dev/null 2>&1 || true
      echo "Killed running application."
    fi

    echo "Scaling app $APP:"
    cat -n "$REPO/SCALE"
    copy_to_container "$APP" "$SCALEFILE" /app/SCALE

    dokku deploy "$APP"
    ;;
  help)
    cat && cat<<EOF
    logs:all <app> [-t] [process_name]                         Show all logs, including supervisord (-t follows)
    logs:app <app> [-t] [process_name]                         Show all logs, exclusing supervisord (-t follows)
    logs:supervisord <app> [-t]                                Show only supervisord log (-t follows)
    scale <app> <proc>=<count> [<proc>=<count>]                Scale an app via supervisord (use instead of ps:scale)
EOF
  ;;

esac
